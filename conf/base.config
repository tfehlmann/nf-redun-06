/*
========================================================================================
    tfehlmann/nf-redun-06 Nextflow base config file
========================================================================================
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/

process {

    // TODO nf-core: Check the defaults for all processes
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    // TODO nf-core: Customise requirements for specific processes.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 8    * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
    withName:CUSTOM_DUMPSOFTWAREVERSIONS {
        cache = false
        cpus   = { check_max( 1,                   'cpus'    ) }
        memory = { check_max( 1.GB,                'memory'  ) }
    }

    withName:GUNZIP_FASTA {
        cpus   = { check_max( 1,    'cpus'                   ) }
        memory = { check_max( 1.GB, 'memory'                 ) }
    }

    withName:CUSTOM_GETCHROMSIZES {
        cpus   = { check_max( 1,    'cpus'                   ) }
        memory = { check_max( 1.GB, 'memory'                 ) }
    }

    withName:GATK4_CREATESEQUENCEDICTIONARY {
        cpus   = { check_max( 1,                   'cpus'    ) }
        memory = { check_max( 8.GB * task.attempt, 'memory'  ) }
    }

    withName:CUTADAPT {
        cpus   = { check_max( 8 * task.attempt,    'cpus'    ) }
        memory = { check_max( 2.GB * task.attempt, 'memory'  ) }
    }

    withName:GUNZIP_FASTA {
        cpus   = { check_max( 1,    'cpus'                   ) }
        memory = { check_max( 1.GB, 'memory'                 ) }
    }

    withName:BWAMEM2_MEM {
        cpus   = { check_max( 32 * task.attempt,    'cpus'   ) }
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    }

    withName:BWAMEM2_INDEX {
        cpus   = { check_max( 2,                    'cpus'   ) }
        memory = { check_max( 64.GB * (0.5 + 0.5 * task.attempt) , 'memory' ) }
        time   = { check_max( 8.h   * task.attempt, 'time'   ) }
    }

    withName:GATK4_SETNMMDANDDUQTAGS {
        cpus   = { check_max( 4 * task.attempt,    'cpus'    ) }
        memory = { check_max( 2.GB * task.attempt, 'memory'  ) }
    }

    withName:GATK4_MARKDUPLICATES {
        cpus   = { check_max( 2 * task.attempt,    'cpus'    ) }
        memory = { check_max( 4.GB * task.attempt, 'memory'  ) }
    }

    withName:GATK4_BASERECALIBRATOR {
        cpus   = { check_max( 2 * task.attempt,    'cpus'    ) }
        memory = { check_max( 2.GB * task.attempt, 'memory'  ) }
    }

    withName:GATK4_APPLYBQSR {
        cpus   = { check_max( 2 * task.attempt,    'cpus'    ) }
        memory = { check_max( 2.GB * task.attempt, 'memory'  ) }
    }

    withName:SAMTOOLS_DEPTH {
        cpus   = { check_max( 1,    'cpus'    ) }
        memory = { check_max( 1.GB * task.attempt, 'memory'  ) }
    }

    withName:SAMTOOLS_INDEX {
        cpus   = { check_max( 1,    'cpus'    ) }
        memory = { check_max( 1.GB * task.attempt, 'memory'  ) }
    }

    withName:PICARD_COLLECTINSERTSIZEMETRICS {
        cpus   = { check_max( 2 * task.attempt,    'cpus'    ) }
        memory = { check_max( 2.GB * task.attempt, 'memory'  ) }
    }

    withName:PICARD_COLLECTALIGNMENTSUMMARYMETRICS {
        cpus   = { check_max( 2 * task.attempt,    'cpus'    ) }
        memory = { check_max( 1.GB * task.attempt, 'memory'  ) }
    }
}
